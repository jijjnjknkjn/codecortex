#This file sets up the layout, includes the necessary libraries (Chart.js), and provides containers for the stock chart and the anomaly reports.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Codecortex ⚡ Anomaly Analyst Dashboard</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
</head>
<body>
    <header>
        <h1>Codecortex ⚡ Hybrid Financial Analyst</h1>
        <p>Real-time anomaly detection and AI-driven contextual justification.</p>
    </header>

    <main>
        <section class="chart-container">
            <h2>Stock Price & Volume Analysis (<span id="ticker-display">TSLA</span>)</h2>
            <canvas id="stockChart"></canvas>
        </section>

        <section class="report-container">
            <h2>AI Anomaly Justification Reports</h2>
            <div id="anomalyReports">
                <p class="placeholder">Run the Python script (`src/main.py`) to generate and load data.</p>
            </div>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 Codecortex Project | ML Anomaly Detector + Agentic AI Analyst</p>
    </footer>

    <script src="app.js"></script>
</body>
</html>



#Simple CSS for a clean, professional dashboard look.
:root {
    --primary-color: #007bff;
    --background-color: #f4f7f9;
    --card-background: #ffffff;
    --text-color: #333;
    --anomaly-color: #dc3545;
    --justified-color: #28a745;
    --suspicious-color: #ffc107;
}

body {
    font-family: 'Arial', sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    margin: 0;
    padding: 0;
}

header {
    background-color: var(--primary-color);
    color: white;
    padding: 20px;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

header h1 {
    margin: 0 0 5px 0;
}

main {
    max-width: 1200px;
    margin: 20px auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 30px;
}

.chart-container, .report-container {
    background-color: var(--card-background);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

/* Chart Specific Styles */
#stockChart {
    max-height: 400px;
}

/* Report Styles */
#anomalyReports {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.report-card {
    border-left: 5px solid var(--primary-color);
    padding: 15px;
    border-radius: 4px;
    background-color: #fafafa;
}

.report-card.Justified {
    border-left-color: var(--justified-color);
}

.report-card.Suspicious {
    border-left-color: var(--suspicious-color);
}

.report-card h3 {
    margin-top: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 1.1em;
}

.report-card p {
    font-size: 0.9em;
    color: #666;
    margin-bottom: 5px;
}

.verdict-tag {
    font-weight: bold;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    color: white;
}

.verdict-tag.Justified {
    background-color: var(--justified-color);
}

.verdict-tag.Suspicious {
    background-color: var(--suspicious-color);
    color: var(--text-color);
}

footer {
    text-align: center;
    padding: 15px;
    margin-top: 30px;
    font-size: 0.8em;
    color: #666;
    border-top: 1px solid #ddd;
}

// --- SIMULATED DATA (Replace this with a fetch() call to a real data API/JSON file) ---

const MOCK_DATA = {
    ticker: "TSLA",
    time_series: [
        // This array represents OHLC data points over time (e.g., 1-minute intervals)
        // Format: [timestamp (ms), price, volume]
        [1715788800000, 175.00, 100000],
        [1715788860000, 175.50, 85000],
        [1715788920000, 175.30, 95000],
        // ... many normal data points ...
        
        // ANOMALY POINT 1 (High volume and price change) - Corresponds to the report below
        [1715801100000, 185.20, 1200000], // Example Timestamp: May 15, 2024 14:45:00
        
        // ... normal data points ...
        
        // ANOMALY POINT 2 (Sudden Drop with low news coverage)
        [1715810000000, 170.00, 500000],
        
        // ... more data ...
        [1715830000000, 172.50, 110000],
    ],
    reports: [
        {
            ticker: "TSLA",
            timestamp: "2024-05-15 14:45:00",
            type: "Major Price Spike (+5.80%)",
            verdict: "Justified",
            reasoning: "The agent found multiple highly relevant, positive news items (surprise profit, Q1 beat) released just before the anomaly timestamp, directly correlating with the significant volume and price activity.",
            dataPointTime: 1715801100000 // Match the timestamp in the time_series
        },
        {
            ticker: "TSLA",
            timestamp: "2024-05-15 17:13:20",
            type: "Major Price Drop (-3.50%)",
            verdict: "Suspicious",
            reasoning: "No highly relevant news or market events were found in the surrounding 3-day window. The drop is unexplained and may be linked to short-term manipulation or internal events.",
            dataPointTime: 1715810000000 // Match the timestamp in the time_series
        }
    ]
};

// --- END SIMULATED DATA ---

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('ticker-display').textContent = MOCK_DATA.ticker;
    
    // Process data for Chart.js
    const priceData = MOCK_DATA.time_series.map(([time, price, volume]) => ({
        x: new Date(time),
        y: price
    }));
    
    const volumeData = MOCK_DATA.time_series.map(([time, price, volume]) => ({
        x: new Date(time),
        y: volume
    }));

    // Identify anomaly points for visual marking
    const anomalyMarkers = MOCK_DATA.reports.map(report => ({
        x: new Date(report.dataPointTime),
        y: priceData.find(d => d.x.getTime() === report.dataPointTime)?.y
    })).filter(marker => marker.y !== undefined);
    
    // 1. Initialize the Chart
    const ctx = document.getElementById('stockChart').getContext('2d');
    const stockChart = new Chart(ctx, {
        type: 'line',
        data: {
            datasets: [
                // Price Data
                {
                    label: 'Price',
                    data: priceData,
                    borderColor: 'rgba(0, 123, 255, 1)',
                    backgroundColor: 'rgba(0, 123, 255, 0.2)',
                    yAxisID: 'yPrice',
                    tension: 0.1,
                    pointRadius: 0
                },
                // Anomaly Markers (Scatter points)
                {
                    type: 'scatter',
                    label: 'Anomaly',
                    data: anomalyMarkers,
                    backgroundColor: 'red',
                    borderColor: 'red',
                    pointRadius: 5,
                    pointHoverRadius: 8,
                    yAxisID: 'yPrice'
                },
                // Volume Data (Bar chart on secondary axis)
                {
                    type: 'bar',
                    label: 'Volume',
                    data: volumeData,
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    yAxisID: 'yVolume',
                    categoryPercentage: 1.0,
                    barPercentage: 1.0
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'hour'
                    },
                    title: {
                        display: true,
                        text: 'Time'
                    }
                },
                yPrice: {
                    type: 'linear',
                    display: 'auto',
                    position: 'left',
                    title: {
                        display: true,
                        text: 'Stock Price ($)'
                    }
                },
                yVolume: {
                    type: 'linear',
                    display: 'auto',
                    position: 'right',
                    title: {
                        display: true,
                        text: 'Volume'
                    },
                    grid: {
                        drawOnChartArea: false, // Only draw the grid for the price axis
                    }
                }
            },
            plugins: {
                tooltip: {
                    mode: 'index',
                    intersect: false,
                },
                legend: {
                    display: true
                }
            }
        }
    });

    // 2. Render Anomaly Reports
    const reportsContainer = document.getElementById('anomalyReports');
    reportsContainer.innerHTML = ''; // Clear the placeholder
    
    MOCK_DATA.reports.forEach(report => {
        const card = document.createElement('div');
        card.className = `report-card ${report.verdict}`;

        const verdictTag = `<span class="verdict-tag ${report.verdict}">${report.verdict}</span>`;
        
        card.innerHTML = `
            <h3>
                <span>Anomaly at ${report.timestamp}</span>
                ${verdictTag}
            </h3>
            <p><strong>Type:</strong> ${report.type}</p>
            <p><strong>Reasoning:</strong> ${report.reasoning}</p>
        `;
        reportsContainer.appendChild(card);
    });
});





