from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import yfinance as yf
import pandas as pd
from sklearn.ensemble import IsolationForest
import numpy as np

app = FastAPI()

# âœ… Allow frontend (Lovable/React) to call backend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],   # change "*" to your frontend URL in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request schema
class StockRequest(BaseModel):
    symbol: str
    start_date: str
    end_date: str

# Helper: detect anomalies
def detect_anomalies(symbol: str, start: str, end: str):
    data = yf.download(symbol, start=start, end=end)
    if data.empty:
        return []

    data["Return"] = data["Close"].pct_change()
    data["Volatility"] = data["Return"].rolling(10).std()
    data["Volume_z"] = (
        (data["Volume"] - data["Volume"].rolling(10).mean())
        / data["Volume"].rolling(10).std()
    )

    features = data[["Return", "Volatility", "Volume_z"]].dropna()
    if features.empty:
        return []

    model = IsolationForest(contamination=0.02, random_state=42)
    anomalies = model.fit_predict(features)

    features["Anomaly"] = anomalies
    result = data.join(features["Anomaly"], how="left").reset_index()
    result["Anomaly"].fillna(0, inplace=True)

    result_json = result[
        ["Date", "Open", "High", "Low", "Close", "Volume", "Anomaly"]
    ]
    result_json = result_json.replace({np.nan: None})
    return result_json.to_dict(orient="records")

# API endpoint
@app.post("/detect")
def detect_stock_anomalies(request: StockRequest):
    data = detect_anomalies(request.symbol, request.start_date, request.end_date)
    return {
        "symbol": request.symbol,
        "start_date": request.start_date,
        "end_date": request.end_date,
        "anomalies": data
    }

